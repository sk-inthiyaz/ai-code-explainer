{
  "problems": [
    {
      "title": "Reverse Integer",
      "description": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return 0.",
      "difficulty": "Easy",
      "topic": "Strings",
      "constraints": "-2^31 <= x <= 2^31 - 1",
      "hints": ["Handle sign separately", "Check for overflow before returning"],
      "functionSignature": {
        "name": "reverse",
        "params": ["x"],
        "returnType": "int"
      },
      "codeTemplate": {
        "javascript": "function reverse(x) {\n    // Your code here\n}\n",
        "python": "def reverse(x):\n    # Your code here\n    pass\n",
        "java": "class Solution {\n    public int reverse(int x) {\n        // Your code here\n    }\n}\n",
        "cpp": "class Solution {\npublic:\n    int reverse(int x) {\n        // Your code here\n    }\n};\n"
      },
      "testCases": [
        {
          "input": "123",
          "expectedOutput": "321",
          "explanation": "Reversing digits gives 321",
          "isHidden": false
        },
        {
          "input": "-123",
          "expectedOutput": "-321",
          "explanation": "Negative number reversed",
          "isHidden": false
        }
      ]
    },
    {
      "title": "Single Number",
      "description": "Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.",
      "difficulty": "Easy",
      "topic": "Arrays",
      "constraints": "1 <= nums.length <= 3 * 10^4\n-3 * 10^4 <= nums[i] <= 3 * 10^4",
      "hints": ["Use XOR to cancel duplicates"],
      "functionSignature": {
        "name": "singleNumber",
        "params": ["nums"],
        "returnType": "int"
      },
      "codeTemplate": {
        "javascript": "function singleNumber(nums) {\n    // Your code here\n}\n",
        "python": "def singleNumber(nums):\n    # Your code here\n    pass\n",
        "java": "class Solution {\n    public int singleNumber(int[] nums) {\n        // Your code here\n    }\n}\n",
        "cpp": "class Solution {\npublic:\n    int singleNumber(vector<int>& nums) {\n        // Your code here\n    }\n};\n"
      },
      "testCases": [
        {
          "input": "[2,2,1]",
          "expectedOutput": "1",
          "explanation": "1 appears once",
          "isHidden": false
        },
        {
          "input": "[4,1,2,1,2]",
          "expectedOutput": "4",
          "explanation": "4 appears only once",
          "isHidden": true
        }
      ]
    },
    {
      "title": "Valid Parentheses",
      "description": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.",
      "difficulty": "Easy",
      "topic": "Stack",
      "constraints": "1 <= s.length <= 10^4",
      "hints": ["Use stack to match parentheses"],
      "functionSignature": {
        "name": "isValid",
        "params": ["s"],
        "returnType": "bool"
      },
      "codeTemplate": {
        "javascript": "function isValid(s) {\n    // Your code here\n}\n",
        "python": "def isValid(s):\n    # Your code here\n    pass\n",
        "java": "class Solution {\n    public boolean isValid(String s) {\n        // Your code here\n    }\n}\n",
        "cpp": "class Solution {\npublic:\n    bool isValid(string s) {\n        // Your code here\n    }\n};\n"
      },
      "testCases": [
        {
          "input": "()",
          "expectedOutput": "true",
          "explanation": "Balanced parentheses",
          "isHidden": false
        },
        {
          "input": "(]",
          "expectedOutput": "false",
          "explanation": "Mismatched parentheses",
          "isHidden": true
        }
      ]
    },
    {
      "title": "Merge Two Sorted Lists",
      "description": "Merge two sorted linked lists and return it as a new sorted list. The new list should be made by splicing together the nodes of the first two lists.",
      "difficulty": "Easy",
      "topic": "Linked List",
      "constraints": "The number of nodes in both lists is in the range [0, 50]\n-100 <= Node.val <= 100",
      "hints": ["Use two pointers", "Iterate until one list is empty"],
      "functionSignature": {
        "name": "mergeTwoLists",
        "params": ["list1", "list2"],
        "returnType": "ListNode"
      },
      "codeTemplate": {
        "javascript": "function mergeTwoLists(list1, list2) {\n    // Your code here\n}\n",
        "python": "def mergeTwoLists(list1, list2):\n    # Your code here\n    pass\n",
        "java": "class Solution {\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        // Your code here\n    }\n}\n",
        "cpp": "class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n        // Your code here\n    }\n};\n"
      },
      "testCases": [
        {
          "input": "[1,2,4], [1,3,4]",
          "expectedOutput": "[1,1,2,3,4,4]",
          "explanation": "Merged in sorted order",
          "isHidden": false
        }
      ]
    },
    {
      "title": "Binary Search",
      "description": "Given a sorted array of integers nums and an integer target, return the index if the target is found. If not, return -1.",
      "difficulty": "Medium",
      "topic": "Binary Search",
      "constraints": "-10^4 <= nums[i], target <= 10^4",
      "hints": ["Use two-pointer binary search approach"],
      "functionSignature": {
        "name": "search",
        "params": ["nums", "target"],
        "returnType": "int"
      },
      "codeTemplate": {
        "javascript": "function search(nums, target) {\n    // Your code here\n}\n",
        "python": "def search(nums, target):\n    # Your code here\n    pass\n",
        "java": "class Solution {\n    public int search(int[] nums, int target) {\n        // Your code here\n    }\n}\n",
        "cpp": "class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        // Your code here\n    }\n};\n"
      },
      "testCases": [
        {
          "input": "[-1,0,3,5,9,12], 9",
          "expectedOutput": "4",
          "explanation": "nums[4] = 9",
          "isHidden": false
        }
      ]
    },
    {
      "title": "Maximum Subarray",
      "description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.",
      "difficulty": "Medium",
      "topic": "Dynamic Programming",
      "constraints": "1 <= nums.length <= 10^5\n-10^4 <= nums[i] <= 10^4",
      "hints": ["Use Kadane’s algorithm"],
      "functionSignature": {
        "name": "maxSubArray",
        "params": ["nums"],
        "returnType": "int"
      },
      "codeTemplate": {
        "javascript": "function maxSubArray(nums) {\n    // Your code here\n}\n",
        "python": "def maxSubArray(nums):\n    # Your code here\n    pass\n",
        "java": "class Solution {\n    public int maxSubArray(int[] nums) {\n        // Your code here\n    }\n}\n",
        "cpp": "class Solution {\npublic:\n    int maxSubArray(vector<int>& nums) {\n        // Your code here\n    }\n};\n"
      },
      "testCases": [
        {
          "input": "[-2,1,-3,4,-1,2,1,-5,4]",
          "expectedOutput": "6",
          "explanation": "Subarray [4,-1,2,1] has the largest sum = 6",
          "isHidden": false
        }
      ]
    },
    {
      "title": "Minimum Path Sum",
      "description": "Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.",
      "difficulty": "Hard",
      "topic": "Dynamic Programming",
      "constraints": "1 <= m, n <= 200\n0 <= grid[i][j] <= 100",
      "hints": ["Use DP to store the minimum sum for each cell"],
      "functionSignature": {
        "name": "minPathSum",
        "params": ["grid"],
        "returnType": "int"
      },
      "codeTemplate": {
        "javascript": "function minPathSum(grid) {\n    // Your code here\n}\n",
        "python": "def minPathSum(grid):\n    # Your code here\n    pass\n",
        "java": "class Solution {\n    public int minPathSum(int[][] grid) {\n        // Your code here\n    }\n}\n",
        "cpp": "class Solution {\npublic:\n    int minPathSum(vector<vector<int>>& grid) {\n        // Your code here\n    }\n};\n"
      },
      "testCases": [
        {
          "input": "[[1,3,1],[1,5,1],[4,2,1]]",
          "expectedOutput": "7",
          "explanation": "Path 1→3→1→1→1 has the minimum sum 7",
          "isHidden": false
        }
      ]
    }
  ]
}
