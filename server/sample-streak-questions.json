{
  "date": "2025-10-21",
  "questions": [
    {
      "title": "Two Sum",
      "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice.",
      "constraints": "2 <= nums.length <= 10^4\n-10^9 <= nums[i] <= 10^9\n-10^9 <= target <= 10^9\nOnly one valid answer exists.",
      "hints": [
        "Use a hash map to store the numbers you've seen so far",
        "For each number, check if (target - current number) exists in the hash map"
      ],
      "codeTemplate": {
        "javascript": "// Write your JavaScript solution here\nfunction twoSum(nums, target) {\n    // Your code here\n}\n\n// Test\nconst nums = [2, 7, 11, 15];\nconst target = 9;\nconsole.log(JSON.stringify(twoSum(nums, target)));",
        "python": "# Write your Python solution here\ndef two_sum(nums, target):\n    # Your code here\n    pass\n\n# Test\nnums = [2, 7, 11, 15]\ntarget = 9\nprint(two_sum(nums, target))",
        "java": "import java.util.*;\n\npublic class Main {\n    public static int[] twoSum(int[] nums, int target) {\n        // Your code here\n        return new int[]{};\n    }\n    \n    public static void main(String[] args) {\n        int[] nums = {2, 7, 11, 15};\n        int target = 9;\n        System.out.println(Arrays.toString(twoSum(nums, target)));\n    }\n}",
        "cpp": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    // Your code here\n    return {};\n}\n\nint main() {\n    vector<int> nums = {2, 7, 11, 15};\n    int target = 9;\n    vector<int> result = twoSum(nums, target);\n    cout << \"[\" << result[0] << \",\" << result[1] << \"]\" << endl;\n    return 0;\n}"
      },
      "testCases": [
        {
          "input": "[2,7,11,15]\n9",
          "expectedOutput": "[0,1]",
          "explanation": "Because nums[0] + nums[1] == 9, we return [0, 1]",
          "isHidden": false
        },
        {
          "input": "[3,2,4]\n6",
          "expectedOutput": "[1,2]",
          "explanation": "Because nums[1] + nums[2] == 6",
          "isHidden": false
        },
        {
          "input": "[3,3]\n6",
          "expectedOutput": "[0,1]",
          "explanation": "Both elements at indices 0 and 1 equal 3, and they sum to 6",
          "isHidden": true
        },
        {
          "input": "[-1,-2,-3,-4,-5]\n-8",
          "expectedOutput": "[2,4]",
          "explanation": "Hidden edge case: negative numbers, -3 + -5 = -8",
          "isHidden": true
        },
        {
          "input": "[0,4,3,0]\n0",
          "expectedOutput": "[0,3]",
          "explanation": "Hidden edge case: zeros in array",
          "isHidden": true
        }
      ]
    },
    {
      "title": "Reverse String",
      "description": "Write a function that reverses a string. The input string is given as an array of characters. You must do this by modifying the input array in-place with O(1) extra memory.",
      "constraints": "1 <= s.length <= 10^5\ns[i] is a printable ASCII character",
      "hints": [
        "Use two pointers: one at the start and one at the end",
        "Swap characters and move pointers toward each other"
      ],
      "codeTemplate": {
        "javascript": "// Write your JavaScript solution here\nfunction reverseString(s) {\n    // Your code here\n}\n\n// Test\nconst s = ['h', 'e', 'l', 'l', 'o'];\nreverseString(s);\nconsole.log(s.join(''));",
        "python": "# Write your Python solution here\ndef reverse_string(s):\n    # Your code here\n    pass\n\n# Test\ns = ['h', 'e', 'l', 'l', 'o']\nreverse_string(s)\nprint(''.join(s))",
        "java": "public class Main {\n    public static void reverseString(char[] s) {\n        // Your code here\n    }\n    \n    public static void main(String[] args) {\n        char[] s = {'h', 'e', 'l', 'l', 'o'};\n        reverseString(s);\n        System.out.println(new String(s));\n    }\n}",
        "cpp": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvoid reverseString(vector<char>& s) {\n    // Your code here\n}\n\nint main() {\n    vector<char> s = {'h', 'e', 'l', 'l', 'o'};\n    reverseString(s);\n    for (char c : s) cout << c;\n    cout << endl;\n    return 0;\n}"
      },
      "testCases": [
        {
          "input": "hello",
          "expectedOutput": "olleh",
          "explanation": "Reverse of 'hello' is 'olleh'",
          "isHidden": false
        },
        {
          "input": "world",
          "expectedOutput": "dlrow",
          "explanation": "Reverse of 'world' is 'dlrow'",
          "isHidden": false
        },
        {
          "input": "a",
          "expectedOutput": "a",
          "explanation": "Single character remains the same",
          "isHidden": true
        },
        {
          "input": "ab",
          "expectedOutput": "ba",
          "explanation": "Two characters swap positions",
          "isHidden": true
        }
      ]
    },
    {
      "title": "Valid Parentheses",
      "description": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if: Open brackets must be closed by the same type of brackets. Open brackets must be closed in the correct order.",
      "constraints": "1 <= s.length <= 10^4\ns consists of parentheses only '()[]{}",
      "hints": [
        "Use a stack data structure",
        "Push opening brackets onto the stack and pop when you see a closing bracket"
      ],
      "codeTemplate": {
        "javascript": "function isValid(s) {\n    // Your code here\n}\n\nconsole.log(isValid('()'));",
        "python": "def is_valid(s):\n    # Your code here\n    pass\n\nprint(is_valid('()'))",
        "java": "import java.util.*;\n\npublic class Main {\n    public static boolean isValid(String s) {\n        // Your code here\n        return false;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(isValid(\"()\"));\n    }\n}",
        "cpp": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool isValid(string s) {\n    // Your code here\n    return false;\n}\n\nint main() {\n    cout << (isValid(\"()\") ? \"true\" : \"false\") << endl;\n    return 0;\n}"
      },
      "testCases": [
        {
          "input": "()",
          "expectedOutput": "true",
          "isHidden": false
        },
        {
          "input": "()[]{}",
          "expectedOutput": "true",
          "isHidden": false
        },
        {
          "input": "(]",
          "expectedOutput": "false",
          "isHidden": true
        },
        {
          "input": "([)]",
          "expectedOutput": "false",
          "isHidden": true
        },
        {
          "input": "{[]}",
          "expectedOutput": "true",
          "isHidden": true
        }
      ]
    },
    {
      "title": "Merge Two Sorted Lists",
      "description": "You are given the heads of two sorted linked lists list1 and list2. Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists. Return the head of the merged linked list.",
      "constraints": "The number of nodes in both lists is in the range [0, 50]\n-100 <= Node.val <= 100\nBoth list1 and list2 are sorted in non-decreasing order",
      "hints": [
        "Use a dummy node to simplify edge cases",
        "Compare values from both lists and link the smaller one"
      ],
      "codeTemplate": {
        "javascript": "function mergeTwoLists(l1, l2) {\n    // Your code here\n}\n\n// For simplicity, print merged list values as array\nconsole.log('[1,1,2,3,4,4]');",
        "python": "def merge_two_lists(l1, l2):\n    # Your code here\n    pass\n\nprint('[1,1,2,3,4,4]')",
        "java": "public class Main {\n    public static String mergeTwoLists(String l1, String l2) {\n        // Your code here (simplified for demo)\n        return \"[1,1,2,3,4,4]\";\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(mergeTwoLists(\"[1,2,4]\", \"[1,3,4]\"));\n    }\n}",
        "cpp": "#include <iostream>\nusing namespace std;\n\nstring mergeTwoLists(string l1, string l2) {\n    // Your code here (simplified)\n    return \"[1,1,2,3,4,4]\";\n}\n\nint main() {\n    cout << mergeTwoLists(\"[1,2,4]\", \"[1,3,4]\") << endl;\n    return 0;\n}"
      },
      "testCases": [
        {
          "input": "[1,2,4]\n[1,3,4]",
          "expectedOutput": "[1,1,2,3,4,4]",
          "isHidden": false
        },
        {
          "input": "[]\n[]",
          "expectedOutput": "[]",
          "isHidden": false
        },
        {
          "input": "[]\n[0]",
          "expectedOutput": "[0]",
          "isHidden": true
        }
      ]
    },
    {
      "title": "Binary Tree Inorder Traversal",
      "description": "Given the root of a binary tree, return the inorder traversal of its nodes' values.",
      "constraints": "The number of nodes in the tree is in the range [0, 100]\n-100 <= Node.val <= 100",
      "hints": [
        "Use recursion: left subtree, root, right subtree",
        "Or use a stack for iterative approach"
      ],
      "codeTemplate": {
        "javascript": "function inorderTraversal(root) {\n    // Your code here\n}\n\nconsole.log('[1,3,2]');",
        "python": "def inorder_traversal(root):\n    # Your code here\n    pass\n\nprint('[1,3,2]')",
        "java": "import java.util.*;\n\npublic class Main {\n    public static String inorderTraversal(String root) {\n        // Your code here (simplified)\n        return \"[1,3,2]\";\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(inorderTraversal(\"[1,null,2,3]\"));\n    }\n}",
        "cpp": "#include <iostream>\nusing namespace std;\n\nstring inorderTraversal(string root) {\n    // Your code here (simplified)\n    return \"[1,3,2]\";\n}\n\nint main() {\n    cout << inorderTraversal(\"[1,null,2,3]\") << endl;\n    return 0;\n}"
      },
      "testCases": [
        {
          "input": "[1,null,2,3]",
          "expectedOutput": "[1,3,2]",
          "isHidden": false
        },
        {
          "input": "[]",
          "expectedOutput": "[]",
          "isHidden": false
        },
        {
          "input": "[1]",
          "expectedOutput": "[1]",
          "isHidden": true
        }
      ]
    }
  ]
}
