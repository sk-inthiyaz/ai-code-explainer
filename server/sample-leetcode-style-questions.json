{
  "date": "2025-10-21",
  "questions": [
    {
      "title": "Two Sum",
      "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice.",
      "constraints": "2 <= nums.length <= 10^4\n-10^9 <= nums[i] <= 10^9\n-10^9 <= target <= 10^9\nOnly one valid answer exists.",
      "hints": [
        "Use a hash map to store seen values",
        "For each number, check if (target - current) exists in the map"
      ],
      "functionSignature": {
        "name": "twoSum",
        "params": ["nums", "target"],
        "returnType": "array"
      },
      "codeTemplate": {
        "javascript": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nfunction twoSum(nums, target) {\n    // Write your solution here\n    \n}",
        "python": "class Solution:\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        # Write your solution here\n        pass",
        "java": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        // Write your solution here\n        \n    }\n}",
        "cpp": "class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        // Write your solution here\n        \n    }\n};"
      },
      "testCases": [
        {
          "input": "[2,7,11,15]\n9",
          "expectedOutput": "[0,1]",
          "explanation": "nums[0] + nums[1] == 9, return [0, 1]",
          "isHidden": false
        },
        {
          "input": "[3,2,4]\n6",
          "expectedOutput": "[1,2]",
          "explanation": "nums[1] + nums[2] == 6",
          "isHidden": false
        },
        {
          "input": "[3,3]\n6",
          "expectedOutput": "[0,1]",
          "isHidden": true
        }
      ]
    },
    {
      "title": "Reverse Integer",
      "description": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return 0.",
      "constraints": "-2^31 <= x <= 2^31 - 1",
      "functionSignature": {
        "name": "reverse",
        "params": ["x"],
        "returnType": "number"
      },
      "codeTemplate": {
        "javascript": "/**\n * @param {number} x\n * @return {number}\n */\nfunction reverse(x) {\n    // Write your solution here\n    \n}",
        "python": "class Solution:\n    def reverse(self, x):\n        # Write your solution here\n        pass",
        "java": "class Solution {\n    public int reverse(int x) {\n        // Write your solution here\n        \n    }\n}",
        "cpp": "class Solution {\npublic:\n    int reverse(int x) {\n        // Write your solution here\n        \n    }\n};"
      },
      "testCases": [
        { "input": "123", "expectedOutput": "321", "isHidden": false },
        { "input": "-123", "expectedOutput": "-321", "isHidden": false },
        { "input": "120", "expectedOutput": "21", "isHidden": true }
      ]
    },
    {
      "title": "Palindrome Number",
      "description": "Given an integer x, return true if x is a palindrome, and false otherwise.",
      "functionSignature": {
        "name": "isPalindrome",
        "params": ["x"],
        "returnType": "boolean"
      },
      "codeTemplate": {
        "javascript": "function isPalindrome(x) {\n    // Write your solution here\n}",
        "python": "class Solution:\n    def isPalindrome(self, x):\n        pass",
        "java": "class Solution {\n    public boolean isPalindrome(int x) {\n        \n    }\n}",
        "cpp": "class Solution {\npublic:\n    bool isPalindrome(int x) {\n        \n    }\n};"
      },
      "testCases": [
        { "input": "121", "expectedOutput": "true", "isHidden": false },
        { "input": "-121", "expectedOutput": "false", "isHidden": false },
        { "input": "10", "expectedOutput": "false", "isHidden": true }
      ]
    },
    {
      "title": "Roman to Integer",
      "description": "Given a roman numeral, convert it to an integer.",
      "functionSignature": {
        "name": "romanToInt",
        "params": ["s"],
        "returnType": "number"
      },
      "codeTemplate": {
        "javascript": "function romanToInt(s) {\n    // Write your solution here\n}",
        "python": "class Solution:\n    def romanToInt(self, s):\n        pass",
        "java": "class Solution {\n    public int romanToInt(String s) {\n        \n    }\n}",
        "cpp": "class Solution {\npublic:\n    int romanToInt(string s) {\n        \n    }\n};"
      },
      "testCases": [
        { "input": "III", "expectedOutput": "3", "isHidden": false },
        { "input": "IV", "expectedOutput": "4", "isHidden": false },
        { "input": "MCMXCIV", "expectedOutput": "1994", "isHidden": true }
      ]
    },
    {
      "title": "Longest Common Prefix",
      "description": "Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string \"\".",
      "functionSignature": {
        "name": "longestCommonPrefix",
        "params": ["strs"],
        "returnType": "string"
      },
      "codeTemplate": {
        "javascript": "function longestCommonPrefix(strs) {\n    // Write your solution here\n}",
        "python": "class Solution:\n    def longestCommonPrefix(self, strs):\n        pass",
        "java": "class Solution {\n    public String longestCommonPrefix(String[] strs) {\n        \n    }\n}",
        "cpp": "class Solution {\npublic:\n    string longestCommonPrefix(vector<string>& strs) {\n        \n    }\n};"
      },
      "testCases": [
        { "input": "[\"flower\",\"flow\",\"flight\"]", "expectedOutput": "\"fl\"", "isHidden": false },
        { "input": "[\"dog\",\"racecar\",\"car\"]", "expectedOutput": "\"\"", "isHidden": false },
        { "input": "[\"a\"]", "expectedOutput": "\"a\"", "isHidden": true }
      ]
    }
  ]
}
