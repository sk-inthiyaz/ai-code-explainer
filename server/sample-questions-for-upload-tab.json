{
  "questions": [
    {
      "title": "Two Sum",
      "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.",
      "difficulty": "easy",
      "category": "Arrays",
      "hints": [
        "Use a hash map to store the numbers you've seen",
        "For each number, check if (target - current) exists"
      ],
      "testCases": [
        {
          "input": "[2,7,11,15]\n9",
          "expectedOutput": "[0,1]"
        },
        {
          "input": "[3,2,4]\n6",
          "expectedOutput": "[1,2]"
        },
        {
          "input": "[3,3]\n6",
          "expectedOutput": "[0,1]"
        }
      ]
    },
    {
      "title": "Reverse String",
      "description": "Write a function that reverses a string.",
      "difficulty": "easy",
      "category": "Strings",
      "hints": [
        "Use two pointers approach",
        "Swap from both ends"
      ],
      "testCases": [
        {
          "input": "hello",
          "expectedOutput": "olleh"
        },
        {
          "input": "world",
          "expectedOutput": "dlrow"
        }
      ]
    },
    {
      "title": "Valid Parentheses",
      "description": "Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.",
      "difficulty": "mid-easy",
      "category": "Stack",
      "hints": [
        "Use a stack data structure",
        "Push opening brackets, pop for closing"
      ],
      "testCases": [
        {
          "input": "()",
          "expectedOutput": "true"
        },
        {
          "input": "()[]{}",
          "expectedOutput": "true"
        },
        {
          "input": "(]",
          "expectedOutput": "false"
        }
      ]
    },
    {
      "title": "Merge Two Sorted Lists",
      "description": "Merge two sorted linked lists and return it as a sorted list.",
      "difficulty": "hard",
      "category": "Linked Lists",
      "hints": [
        "Use a dummy node",
        "Compare values and link the smaller one"
      ],
      "testCases": [
        {
          "input": "[1,2,4]\n[1,3,4]",
          "expectedOutput": "[1,1,2,3,4,4]"
        },
        {
          "input": "[]\n[]",
          "expectedOutput": "[]"
        }
      ]
    },
    {
      "title": "Binary Tree Traversal",
      "description": "Given the root of a binary tree, return the inorder traversal of its nodes' values.",
      "difficulty": "mix",
      "category": "Trees",
      "hints": [
        "Use recursion: left, root, right",
        "Or use stack for iterative"
      ],
      "testCases": [
        {
          "input": "[1,null,2,3]",
          "expectedOutput": "[1,3,2]"
        },
        {
          "input": "[]",
          "expectedOutput": "[]"
        }
      ]
    }
  ]
}
