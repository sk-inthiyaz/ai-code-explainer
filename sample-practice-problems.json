[
  {
    "title": "Two Sum",
    "difficulty": "Easy",
    "topic": "Arrays",
    "description": "Given an array of integers `nums` and an integer `target`, return indices of the two numbers such that they add up to `target`.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nYou can return the answer in any order.",
    "functionSignature": {
      "name": "twoSum",
      "params": [
        { "name": "nums", "type": "int[]" },
        { "name": "target", "type": "int" }
      ],
      "returnType": "int[]"
    },
    "codeTemplate": {
      "javascript": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nfunction twoSum(nums, target) {\n    // Your code here\n}",
      "python": "def twoSum(nums, target):\n    \"\"\"\n    :type nums: List[int]\n    :type target: int\n    :rtype: List[int]\n    \"\"\"\n    # Your code here\n    pass",
      "java": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        // Your code here\n    }\n}",
      "cpp": "class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        // Your code here\n    }\n};"
    },
    "examples": [
      {
        "input": "nums = [2,7,11,15], target = 9",
        "output": "[0,1]",
        "explanation": "Because nums[0] + nums[1] == 9, we return [0, 1]."
      },
      {
        "input": "nums = [3,2,4], target = 6",
        "output": "[1,2]",
        "explanation": "Because nums[1] + nums[2] == 6, we return [1, 2]."
      }
    ],
    "testCases": [
      {
        "input": "[2,7,11,15]\n9",
        "expectedOutput": "[0,1]",
        "explanation": "2 + 7 = 9",
        "isHidden": false
      },
      {
        "input": "[3,2,4]\n6",
        "expectedOutput": "[1,2]",
        "explanation": "2 + 4 = 6",
        "isHidden": false
      },
      {
        "input": "[3,3]\n6",
        "expectedOutput": "[0,1]",
        "explanation": "3 + 3 = 6",
        "isHidden": true
      }
    ],
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "-10^9 <= target <= 10^9",
      "Only one valid answer exists."
    ],
    "hints": [
      "A hash table is a good way to track what numbers you've seen.",
      "For each number, check if target - number exists in the hash table."
    ],
    "tags": ["Array", "Hash Table"],
    "supportedLanguages": ["javascript", "python", "java", "cpp"]
  },
  {
    "title": "Reverse String",
    "difficulty": "Easy",
    "topic": "Strings",
    "description": "Write a function that reverses a string. The input string is given as an array of characters `s`.\n\nYou must do this by modifying the input array in-place with O(1) extra memory.",
    "functionSignature": {
      "name": "reverseString",
      "params": [
        { "name": "s", "type": "char[]" }
      ],
      "returnType": "void"
    },
    "codeTemplate": {
      "javascript": "/**\n * @param {character[]} s\n * @return {void} Do not return anything, modify s in-place instead.\n */\nfunction reverseString(s) {\n    // Your code here\n}",
      "python": "def reverseString(s):\n    \"\"\"\n    :type s: List[str]\n    :rtype: None Do not return anything, modify s in-place instead.\n    \"\"\"\n    # Your code here\n    pass",
      "java": "class Solution {\n    public void reverseString(char[] s) {\n        // Your code here\n    }\n}",
      "cpp": "class Solution {\npublic:\n    void reverseString(vector<char>& s) {\n        // Your code here\n    }\n};"
    },
    "examples": [
      {
        "input": "s = [\"h\",\"e\",\"l\",\"l\",\"o\"]",
        "output": "[\"o\",\"l\",\"l\",\"e\",\"h\"]",
        "explanation": "Reverse the array in-place"
      }
    ],
    "testCases": [
      {
        "input": "[\"h\",\"e\",\"l\",\"l\",\"o\"]",
        "expectedOutput": "[\"o\",\"l\",\"l\",\"e\",\"h\"]",
        "explanation": "Reverse array",
        "isHidden": false
      },
      {
        "input": "[\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]",
        "expectedOutput": "[\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]",
        "explanation": "Reverse array",
        "isHidden": false
      },
      {
        "input": "[\"A\"]",
        "expectedOutput": "[\"A\"]",
        "explanation": "Single element",
        "isHidden": true
      }
    ],
    "constraints": [
      "1 <= s.length <= 10^5",
      "s[i] is a printable ascii character."
    ],
    "hints": [
      "Use two pointers: one at the start and one at the end.",
      "Swap elements and move pointers toward each other."
    ],
    "tags": ["Two Pointers", "String"],
    "supportedLanguages": ["javascript", "python", "java", "cpp"]
  },
  {
    "title": "Valid Parentheses",
    "difficulty": "Easy",
    "topic": "Stack",
    "description": "Given a string `s` containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n\nAn input string is valid if:\n1. Open brackets must be closed by the same type of brackets.\n2. Open brackets must be closed in the correct order.\n3. Every close bracket has a corresponding open bracket of the same type.",
    "functionSignature": {
      "name": "isValid",
      "params": [
        { "name": "s", "type": "string" }
      ],
      "returnType": "boolean"
    },
    "codeTemplate": {
      "javascript": "/**\n * @param {string} s\n * @return {boolean}\n */\nfunction isValid(s) {\n    // Your code here\n}",
      "python": "def isValid(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    # Your code here\n    pass",
      "java": "class Solution {\n    public boolean isValid(String s) {\n        // Your code here\n    }\n}",
      "cpp": "class Solution {\npublic:\n    bool isValid(string s) {\n        // Your code here\n    }\n};"
    },
    "examples": [
      {
        "input": "s = \"()\"",
        "output": "true",
        "explanation": "Valid parentheses"
      },
      {
        "input": "s = \"()[]{}\"",
        "output": "true",
        "explanation": "All types of brackets are properly closed"
      },
      {
        "input": "s = \"(]\"",
        "output": "false",
        "explanation": "Mismatched bracket types"
      }
    ],
    "testCases": [
      {
        "input": "\"()\"",
        "expectedOutput": "true",
        "explanation": "Simple valid case",
        "isHidden": false
      },
      {
        "input": "\"()[]{}\"",
        "expectedOutput": "true",
        "explanation": "Multiple bracket types",
        "isHidden": false
      },
      {
        "input": "\"(]\"",
        "expectedOutput": "false",
        "explanation": "Mismatched brackets",
        "isHidden": false
      },
      {
        "input": "\"([)]\"",
        "expectedOutput": "false",
        "explanation": "Wrong order",
        "isHidden": true
      },
      {
        "input": "\"{[]}\"",
        "expectedOutput": "true",
        "explanation": "Nested brackets",
        "isHidden": true
      }
    ],
    "constraints": [
      "1 <= s.length <= 10^4",
      "s consists of parentheses only '()[]{}'."
    ],
    "hints": [
      "Use a stack to keep track of opening brackets.",
      "When you encounter a closing bracket, check if it matches the most recent opening bracket."
    ],
    "tags": ["Stack", "String"],
    "supportedLanguages": ["javascript", "python", "java", "cpp"]
  },
  {
    "title": "Merge Two Sorted Lists",
    "difficulty": "Easy",
    "topic": "Linked List",
    "description": "You are given the heads of two sorted linked lists `list1` and `list2`.\n\nMerge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.\n\nReturn the head of the merged linked list.",
    "functionSignature": {
      "name": "mergeTwoLists",
      "params": [
        { "name": "list1", "type": "ListNode" },
        { "name": "list2", "type": "ListNode" }
      ],
      "returnType": "ListNode"
    },
    "codeTemplate": {
      "javascript": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} list1\n * @param {ListNode} list2\n * @return {ListNode}\n */\nfunction mergeTwoLists(list1, list2) {\n    // Your code here\n}",
      "python": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        # Your code here\n        pass",
      "java": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        // Your code here\n    }\n}",
      "cpp": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n        // Your code here\n    }\n};"
    },
    "examples": [
      {
        "input": "list1 = [1,2,4], list2 = [1,3,4]",
        "output": "[1,1,2,3,4,4]",
        "explanation": "Merge both lists maintaining sorted order"
      }
    ],
    "testCases": [
      {
        "input": "[1,2,4]\n[1,3,4]",
        "expectedOutput": "[1,1,2,3,4,4]",
        "explanation": "Merge sorted lists",
        "isHidden": false
      },
      {
        "input": "[]\n[]",
        "expectedOutput": "[]",
        "explanation": "Both empty",
        "isHidden": false
      },
      {
        "input": "[]\n[0]",
        "expectedOutput": "[0]",
        "explanation": "One empty list",
        "isHidden": true
      }
    ],
    "constraints": [
      "The number of nodes in both lists is in the range [0, 50].",
      "-100 <= Node.val <= 100",
      "Both list1 and list2 are sorted in non-decreasing order."
    ],
    "hints": [
      "Use a dummy node to simplify edge cases.",
      "Compare nodes from both lists and attach the smaller one to result."
    ],
    "tags": ["Linked List", "Recursion"],
    "supportedLanguages": ["javascript", "python", "java", "cpp"]
  },
  {
    "title": "Longest Substring Without Repeating Characters",
    "difficulty": "Medium",
    "topic": "Strings",
    "description": "Given a string `s`, find the length of the longest substring without repeating characters.",
    "functionSignature": {
      "name": "lengthOfLongestSubstring",
      "params": [
        { "name": "s", "type": "string" }
      ],
      "returnType": "int"
    },
    "codeTemplate": {
      "javascript": "/**\n * @param {string} s\n * @return {number}\n */\nfunction lengthOfLongestSubstring(s) {\n    // Your code here\n}",
      "python": "def lengthOfLongestSubstring(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    # Your code here\n    pass",
      "java": "class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        // Your code here\n    }\n}",
      "cpp": "class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        // Your code here\n    }\n};"
    },
    "examples": [
      {
        "input": "s = \"abcabcbb\"",
        "output": "3",
        "explanation": "The answer is \"abc\", with length 3."
      },
      {
        "input": "s = \"bbbbb\"",
        "output": "1",
        "explanation": "The answer is \"b\", with length 1."
      }
    ],
    "testCases": [
      {
        "input": "\"abcabcbb\"",
        "expectedOutput": "3",
        "explanation": "Substring: abc",
        "isHidden": false
      },
      {
        "input": "\"bbbbb\"",
        "expectedOutput": "1",
        "explanation": "All same characters",
        "isHidden": false
      },
      {
        "input": "\"pwwkew\"",
        "expectedOutput": "3",
        "explanation": "Substring: wke",
        "isHidden": true
      }
    ],
    "constraints": [
      "0 <= s.length <= 5 * 10^4",
      "s consists of English letters, digits, symbols and spaces."
    ],
    "hints": [
      "Use sliding window technique with two pointers.",
      "Use a hash set or map to track characters in current window."
    ],
    "tags": ["String", "Sliding Window", "Hash Table"],
    "supportedLanguages": ["javascript", "python", "java", "cpp"]
  },
  {
    "title": "3Sum",
    "difficulty": "Medium",
    "topic": "Arrays",
    "description": "Given an integer array nums, return all the triplets `[nums[i], nums[j], nums[k]]` such that `i != j`, `i != k`, and `j != k`, and `nums[i] + nums[j] + nums[k] == 0`.\n\nNotice that the solution set must not contain duplicate triplets.",
    "functionSignature": {
      "name": "threeSum",
      "params": [
        { "name": "nums", "type": "int[]" }
      ],
      "returnType": "int[][]"
    },
    "codeTemplate": {
      "javascript": "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nfunction threeSum(nums) {\n    // Your code here\n}",
      "python": "def threeSum(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[List[int]]\n    \"\"\"\n    # Your code here\n    pass",
      "java": "class Solution {\n    public List<List<Integer>> threeSum(int[] nums) {\n        // Your code here\n    }\n}",
      "cpp": "class Solution {\npublic:\n    vector<vector<int>> threeSum(vector<int>& nums) {\n        // Your code here\n    }\n};"
    },
    "examples": [
      {
        "input": "nums = [-1,0,1,2,-1,-4]",
        "output": "[[-1,-1,2],[-1,0,1]]",
        "explanation": "The triplets that sum to 0 are: [-1,0,1] and [-1,-1,2]"
      }
    ],
    "testCases": [
      {
        "input": "[-1,0,1,2,-1,-4]",
        "expectedOutput": "[[-1,-1,2],[-1,0,1]]",
        "explanation": "Find all triplets",
        "isHidden": false
      },
      {
        "input": "[0,1,1]",
        "expectedOutput": "[]",
        "explanation": "No triplets sum to 0",
        "isHidden": false
      },
      {
        "input": "[0,0,0]",
        "expectedOutput": "[[0,0,0]]",
        "explanation": "All zeros",
        "isHidden": true
      }
    ],
    "constraints": [
      "3 <= nums.length <= 3000",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "hints": [
      "Sort the array first.",
      "Use three pointers - fix one and use two-pointer technique for remaining two."
    ],
    "tags": ["Array", "Two Pointers", "Sorting"],
    "supportedLanguages": ["javascript", "python", "java", "cpp"]
  },
  {
    "title": "Container With Most Water",
    "difficulty": "Medium",
    "topic": "Arrays",
    "description": "You are given an integer array `height` of length `n`. There are `n` vertical lines drawn such that the two endpoints of the `i-th` line are `(i, 0)` and `(i, height[i])`.\n\nFind two lines that together with the x-axis form a container, such that the container contains the most water.\n\nReturn the maximum amount of water a container can store.",
    "functionSignature": {
      "name": "maxArea",
      "params": [
        { "name": "height", "type": "int[]" }
      ],
      "returnType": "int"
    },
    "codeTemplate": {
      "javascript": "/**\n * @param {number[]} height\n * @return {number}\n */\nfunction maxArea(height) {\n    // Your code here\n}",
      "python": "def maxArea(height):\n    \"\"\"\n    :type height: List[int]\n    :rtype: int\n    \"\"\"\n    # Your code here\n    pass",
      "java": "class Solution {\n    public int maxArea(int[] height) {\n        // Your code here\n    }\n}",
      "cpp": "class Solution {\npublic:\n    int maxArea(vector<int>& height) {\n        // Your code here\n    }\n};"
    },
    "examples": [
      {
        "input": "height = [1,8,6,2,5,4,8,3,7]",
        "output": "49",
        "explanation": "Lines at index 1 and 8 form container with area = 7 * 7 = 49"
      }
    ],
    "testCases": [
      {
        "input": "[1,8,6,2,5,4,8,3,7]",
        "expectedOutput": "49",
        "explanation": "Max area container",
        "isHidden": false
      },
      {
        "input": "[1,1]",
        "expectedOutput": "1",
        "explanation": "Minimum case",
        "isHidden": false
      },
      {
        "input": "[4,3,2,1,4]",
        "expectedOutput": "16",
        "explanation": "Two equal heights far apart",
        "isHidden": true
      }
    ],
    "constraints": [
      "n == height.length",
      "2 <= n <= 10^5",
      "0 <= height[i] <= 10^4"
    ],
    "hints": [
      "Use two pointers starting from both ends.",
      "Move the pointer with smaller height inward to potentially find larger area."
    ],
    "tags": ["Array", "Two Pointers", "Greedy"],
    "supportedLanguages": ["javascript", "python", "java", "cpp"]
  },
  {
    "title": "Binary Tree Level Order Traversal",
    "difficulty": "Medium",
    "topic": "Trees",
    "description": "Given the `root` of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).",
    "functionSignature": {
      "name": "levelOrder",
      "params": [
        { "name": "root", "type": "TreeNode" }
      ],
      "returnType": "int[][]"
    },
    "codeTemplate": {
      "javascript": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nfunction levelOrder(root) {\n    // Your code here\n}",
      "python": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        # Your code here\n        pass",
      "java": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<List<Integer>> levelOrder(TreeNode root) {\n        // Your code here\n    }\n}",
      "cpp": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<vector<int>> levelOrder(TreeNode* root) {\n        // Your code here\n    }\n};"
    },
    "examples": [
      {
        "input": "root = [3,9,20,null,null,15,7]",
        "output": "[[3],[9,20],[15,7]]",
        "explanation": "Level 0: [3], Level 1: [9,20], Level 2: [15,7]"
      }
    ],
    "testCases": [
      {
        "input": "[3,9,20,null,null,15,7]",
        "expectedOutput": "[[3],[9,20],[15,7]]",
        "explanation": "Standard tree",
        "isHidden": false
      },
      {
        "input": "[1]",
        "expectedOutput": "[[1]]",
        "explanation": "Single node",
        "isHidden": false
      },
      {
        "input": "[]",
        "expectedOutput": "[]",
        "explanation": "Empty tree",
        "isHidden": true
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [0, 2000].",
      "-1000 <= Node.val <= 1000"
    ],
    "hints": [
      "Use BFS (Breadth-First Search) with a queue.",
      "Process nodes level by level."
    ],
    "tags": ["Tree", "BFS", "Binary Tree"],
    "supportedLanguages": ["javascript", "python", "java", "cpp"]
  },
  {
    "title": "Median of Two Sorted Arrays",
    "difficulty": "Hard",
    "topic": "Binary Search",
    "description": "Given two sorted arrays `nums1` and `nums2` of size `m` and `n` respectively, return the median of the two sorted arrays.\n\nThe overall run time complexity should be O(log (m+n)).",
    "functionSignature": {
      "name": "findMedianSortedArrays",
      "params": [
        { "name": "nums1", "type": "int[]" },
        { "name": "nums2", "type": "int[]" }
      ],
      "returnType": "double"
    },
    "codeTemplate": {
      "javascript": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nfunction findMedianSortedArrays(nums1, nums2) {\n    // Your code here\n}",
      "python": "def findMedianSortedArrays(nums1, nums2):\n    \"\"\"\n    :type nums1: List[int]\n    :type nums2: List[int]\n    :rtype: float\n    \"\"\"\n    # Your code here\n    pass",
      "java": "class Solution {\n    public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n        // Your code here\n    }\n}",
      "cpp": "class Solution {\npublic:\n    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\n        // Your code here\n    }\n};"
    },
    "examples": [
      {
        "input": "nums1 = [1,3], nums2 = [2]",
        "output": "2.00000",
        "explanation": "merged array = [1,2,3] and median is 2."
      },
      {
        "input": "nums1 = [1,2], nums2 = [3,4]",
        "output": "2.50000",
        "explanation": "merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5."
      }
    ],
    "testCases": [
      {
        "input": "[1,3]\n[2]",
        "expectedOutput": "2.0",
        "explanation": "Median of [1,2,3]",
        "isHidden": false
      },
      {
        "input": "[1,2]\n[3,4]",
        "expectedOutput": "2.5",
        "explanation": "Average of middle two",
        "isHidden": false
      },
      {
        "input": "[0,0]\n[0,0]",
        "expectedOutput": "0.0",
        "explanation": "All zeros",
        "isHidden": true
      }
    ],
    "constraints": [
      "nums1.length == m",
      "nums2.length == n",
      "0 <= m <= 1000",
      "0 <= n <= 1000",
      "1 <= m + n <= 2000",
      "-10^6 <= nums1[i], nums2[i] <= 10^6"
    ],
    "hints": [
      "Use binary search on the smaller array.",
      "Find partition point where left half has same elements as right half."
    ],
    "tags": ["Array", "Binary Search", "Divide and Conquer"],
    "supportedLanguages": ["javascript", "python", "java", "cpp"]
  },
  {
    "title": "Trapping Rain Water",
    "difficulty": "Hard",
    "topic": "Arrays",
    "description": "Given `n` non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.",
    "functionSignature": {
      "name": "trap",
      "params": [
        { "name": "height", "type": "int[]" }
      ],
      "returnType": "int"
    },
    "codeTemplate": {
      "javascript": "/**\n * @param {number[]} height\n * @return {number}\n */\nfunction trap(height) {\n    // Your code here\n}",
      "python": "def trap(height):\n    \"\"\"\n    :type height: List[int]\n    :rtype: int\n    \"\"\"\n    # Your code here\n    pass",
      "java": "class Solution {\n    public int trap(int[] height) {\n        // Your code here\n    }\n}",
      "cpp": "class Solution {\npublic:\n    int trap(vector<int>& height) {\n        // Your code here\n    }\n};"
    },
    "examples": [
      {
        "input": "height = [0,1,0,2,1,0,1,3,2,1,2,1]",
        "output": "6",
        "explanation": "The elevation map traps 6 units of rain water."
      }
    ],
    "testCases": [
      {
        "input": "[0,1,0,2,1,0,1,3,2,1,2,1]",
        "expectedOutput": "6",
        "explanation": "Complex terrain",
        "isHidden": false
      },
      {
        "input": "[4,2,0,3,2,5]",
        "expectedOutput": "9",
        "explanation": "Water trapped calculation",
        "isHidden": false
      },
      {
        "input": "[4,2,3]",
        "expectedOutput": "1",
        "explanation": "Simple case",
        "isHidden": true
      }
    ],
    "constraints": [
      "n == height.length",
      "1 <= n <= 2 * 10^4",
      "0 <= height[i] <= 10^5"
    ],
    "hints": [
      "For each position, water level = min(max_left, max_right) - current_height.",
      "Use two pointers or precompute max heights."
    ],
    "tags": ["Array", "Two Pointers", "Dynamic Programming", "Stack"],
    "supportedLanguages": ["javascript", "python", "java", "cpp"]
  }
]
