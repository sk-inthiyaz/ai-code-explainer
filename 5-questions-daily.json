{
  "date": "2025-10-24",
  "questions": [
    {
      "title": "Find Single Number",
      "description": "Given a non-empty array of integers nums, every element appears twice except for one element that appears only once. Find that single element.",
      "constraints": "1 <= nums.length <= 3*10^4\n-3*10^4 <= nums[i] <= 3*10^4\nEach element in the array appears twice except for one element which appears only once.",
      "hints": [
        "Think about the properties of XOR operation",
        "a ^ a = 0 and a ^ 0 = a",
        "XOR all numbers together"
      ],
      "functionSignature": {
        "name": "singleNumber",
        "params": ["nums"],
        "returnType": "int"
      },
      "codeTemplate": {
        "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nfunction singleNumber(nums) {\n    // Write your solution here\n}\n",
        "python": "class Solution:\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # Write your solution here\n        pass\n",
        "java": "class Solution {\n    public int singleNumber(int[] nums) {\n        // Write your solution here\n        \n    }\n}\n",
        "cpp": "class Solution {\npublic:\n    int singleNumber(vector<int>& nums) {\n        // Write your solution here\n        \n    }\n};\n"
      },
      "testCases": [
        {
          "input": "[2,2,1]",
          "expectedOutput": "1",
          "explanation": "1 appears once. 2 appears twice.",
          "isHidden": false
        },
        {
          "input": "[4,1,2,1,2]",
          "expectedOutput": "4",
          "explanation": "4 appears once. 1 and 2 appear twice.",
          "isHidden": false
        },
        {
          "input": "[1]",
          "expectedOutput": "1",
          "explanation": "Single element",
          "isHidden": true
        }
      ]
    },
    {
      "title": "Two Sum",
      "description": "Given an array of integers nums and an integer target, return the indices of the two numbers that add up to target. You may assume that each input has exactly one solution, and you may not use the same element twice.",
      "constraints": "2 <= nums.length <= 10^4\n-10^9 <= nums[i] <= 10^9\n-10^9 <= target <= 10^9\nOnly one valid answer exists.",
      "hints": [
        "Use a hash map to store values you've seen",
        "For each number, check if (target - number) exists in the map",
        "If yes, return the indices"
      ],
      "functionSignature": {
        "name": "twoSum",
        "params": ["nums", "target"],
        "returnType": "array"
      },
      "codeTemplate": {
        "javascript": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nfunction twoSum(nums, target) {\n    // Write your solution here\n}\n",
        "python": "class Solution:\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        # Write your solution here\n        pass\n",
        "java": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        // Write your solution here\n        \n    }\n}\n",
        "cpp": "class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        // Write your solution here\n        \n    }\n};\n"
      },
      "testCases": [
        {
          "input": "[2,7,11,15]\n9",
          "expectedOutput": "[0,1]",
          "explanation": "nums[0] + nums[1] == 9",
          "isHidden": false
        },
        {
          "input": "[3,2,4]\n6",
          "expectedOutput": "[1,2]",
          "explanation": "nums[1] + nums[2] == 6",
          "isHidden": false
        },
        {
          "input": "[3,3]\n6",
          "expectedOutput": "[0,1]",
          "explanation": "Same element appears twice",
          "isHidden": true
        }
      ]
    },
    {
      "title": "Valid Parentheses",
      "description": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if: 1) Open brackets must be closed by the same type of brackets. 2) Open brackets must be closed in the correct order.",
      "constraints": "1 <= s.length <= 10^4\ns consists of parentheses only '()[]{}'\nOnly one valid answer exists.",
      "hints": [
        "Use a stack data structure",
        "Push opening brackets onto the stack",
        "For closing brackets, check if it matches the top of stack"
      ],
      "functionSignature": {
        "name": "isValid",
        "params": ["s"],
        "returnType": "boolean"
      },
      "codeTemplate": {
        "javascript": "/**\n * @param {string} s\n * @return {boolean}\n */\nfunction isValid(s) {\n    // Write your solution here\n}\n",
        "python": "class Solution:\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        # Write your solution here\n        pass\n",
        "java": "class Solution {\n    public boolean isValid(String s) {\n        // Write your solution here\n        \n    }\n}\n",
        "cpp": "class Solution {\npublic:\n    bool isValid(string s) {\n        // Write your solution here\n        \n    }\n};\n"
      },
      "testCases": [
        {
          "input": "()",
          "expectedOutput": "true",
          "explanation": "Valid parentheses",
          "isHidden": false
        },
        {
          "input": "([{}])",
          "expectedOutput": "true",
          "explanation": "Valid nested brackets",
          "isHidden": false
        },
        {
          "input": "(]",
          "expectedOutput": "false",
          "explanation": "Invalid closing bracket",
          "isHidden": true
        }
      ]
    },
    {
      "title": "Merge Sorted Arrays",
      "description": "You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of valid elements in nums1 and nums2 respectively. Merge the two arrays into a single array sorted in non-decreasing order.",
      "constraints": "nums1.length == m + n\nnums2.length == n\n0 <= m, n <= 200\n1 <= m + n <= 200\n-10^9 <= nums1[i], nums2[j] <= 10^9",
      "hints": [
        "Work backward from the end of both arrays",
        "Compare and place larger elements first",
        "This avoids overwriting elements in nums1"
      ],
      "functionSignature": {
        "name": "merge",
        "params": ["nums1", "nums2"],
        "returnType": "array"
      },
      "codeTemplate": {
        "javascript": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number[]}\n */\nfunction merge(nums1, nums2) {\n    // Write your solution here\n}\n",
        "python": "class Solution:\n    def merge(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        # Write your solution here\n        pass\n",
        "java": "class Solution {\n    public int[] merge(int[] nums1, int[] nums2) {\n        // Write your solution here\n        \n    }\n}\n",
        "cpp": "class Solution {\npublic:\n    vector<int> merge(vector<int>& nums1, vector<int>& nums2) {\n        // Write your solution here\n        \n    }\n};\n"
      },
      "testCases": [
        {
          "input": "[1,2,3]\n[2,5,6]",
          "expectedOutput": "[1,2,2,3,5,6]",
          "explanation": "Two sorted arrays merged",
          "isHidden": false
        },
        {
          "input": "[]\n[0]",
          "expectedOutput": "[0]",
          "explanation": "Empty first array",
          "isHidden": false
        },
        {
          "input": "[1]\n[]",
          "expectedOutput": "[1]",
          "explanation": "Empty second array",
          "isHidden": true
        }
      ]
    },
    {
      "title": "Longest Substring Without Repeating Characters",
      "description": "Given a string s, find the length of the longest substring without repeating characters.",
      "constraints": "0 <= s.length <= 5 * 10^4\ns consists of English letters, digits, symbols and spaces.\nOnly one valid answer exists.",
      "hints": [
        "Use a sliding window approach",
        "Keep track of characters in a set or map",
        "Expand window by moving right pointer",
        "Shrink window by moving left pointer when duplicate found"
      ],
      "functionSignature": {
        "name": "lengthOfLongestSubstring",
        "params": ["s"],
        "returnType": "int"
      },
      "codeTemplate": {
        "javascript": "/**\n * @param {string} s\n * @return {number}\n */\nfunction lengthOfLongestSubstring(s) {\n    // Write your solution here\n}\n",
        "python": "class Solution:\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        # Write your solution here\n        pass\n",
        "java": "class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        // Write your solution here\n        \n    }\n}\n",
        "cpp": "class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        // Write your solution here\n        \n    }\n};\n"
      },
      "testCases": [
        {
          "input": "abcabcbb",
          "expectedOutput": "3",
          "explanation": "\"abc\" is the longest substring without repeating characters",
          "isHidden": false
        },
        {
          "input": "bbbbb",
          "expectedOutput": "1",
          "explanation": "\"b\" is the longest substring",
          "isHidden": false
        },
        {
          "input": "au",
          "expectedOutput": "2",
          "explanation": "\"au\" has length 2",
          "isHidden": true
        }
      ]
    }
  ]
}
