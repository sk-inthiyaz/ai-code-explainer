{
  "problems": [
    {
      "title": "Two Sum",
      "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may not use the same element twice.",
      "difficulty": "Easy",
      "topic": "Arrays",
      "constraints": [
        "2 <= nums.length <= 10^4",
        "-10^9 <= nums[i], target <= 10^9",
        "Exactly one solution exists"
      ],
      "hints": [
        "Use a hash map to store seen numbers",
        "For each nums[i], check if target - nums[i] was seen"
      ],
      "functionSignature": { "name": "twoSum", "params": ["nums", "target"], "returnType": "int[]" },
      "codeTemplate": {
        "javascript": "function twoSum(nums, target) {\n  // Your code here\n}",
        "python": "def twoSum(nums, target):\n    # Your code here\n    pass",
        "java": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        // Your code here\n        return new int[]{};\n    }\n}",
        "cpp": "class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        // Your code here\n        return {};\n    }\n};"
      },
      "examples": [
        { "input": "nums = [2,7,11,15], target = 9", "output": "[0,1]", "explanation": "2+7=9" }
      ],
      "testCases": [
        { "input": "[2,7,11,15], 9", "expectedOutput": "[0,1]", "explanation": "indices 0 and 1", "isHidden": false },
        { "input": "[3,2,4], 6", "expectedOutput": "[1,2]", "isHidden": false },
        { "input": "[3,3], 6", "expectedOutput": "[0,1]", "isHidden": false }
      ]
    },
    {
      "title": "Single Number",
      "description": "Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.",
      "difficulty": "Easy",
      "topic": "Arrays",
      "constraints": [
        "1 <= nums.length <= 3 * 10^4",
        "-3 * 10^4 <= nums[i] <= 3 * 10^4"
      ],
      "hints": [
        "Use XOR property: a ^ a = 0",
        "XOR all numbers to cancel pairs"
      ],
      "functionSignature": { "name": "singleNumber", "params": ["nums"], "returnType": "int" },
      "codeTemplate": {
        "javascript": "function singleNumber(nums) {\n  // Your code here\n}",
        "python": "def singleNumber(nums):\n    # Your code here\n    pass",
        "java": "class Solution {\n    public int singleNumber(int[] nums) {\n        // Your code here\n        return 0;\n    }\n}",
        "cpp": "class Solution {\npublic:\n    int singleNumber(vector<int>& nums) {\n        // Your code here\n        return 0;\n    }\n};"
      },
      "examples": [
        { "input": "[2,2,1]", "output": "1", "explanation": "1 appears once" }
      ],
      "testCases": [
        { "input": "[2,2,1]", "expectedOutput": "1", "isHidden": false },
        { "input": "[4,1,2,1,2]", "expectedOutput": "4", "isHidden": false },
        { "input": "[1]", "expectedOutput": "1", "isHidden": false }
      ]
    },
    {
      "title": "Merge Sorted Arrays",
      "description": "Given two sorted arrays nums1 and nums2, return a new sorted array containing all elements of both arrays.",
      "difficulty": "Easy",
      "topic": "Arrays",
      "constraints": [
        "0 <= m, n <= 10^5",
        "Arrays are sorted in non-decreasing order"
      ],
      "hints": [
        "Use two pointers",
        "Append any remaining elements"
      ],
      "functionSignature": { "name": "mergeSortedArrays", "params": ["nums1", "nums2"], "returnType": "int[]" },
      "codeTemplate": {
        "javascript": "function mergeSortedArrays(nums1, nums2) {\n  // Your code here\n}",
        "python": "def mergeSortedArrays(nums1, nums2):\n    # Your code here\n    pass",
        "java": "class Solution {\n    public int[] mergeSortedArrays(int[] nums1, int[] nums2) {\n        // Your code here\n        return new int[]{};\n    }\n}",
        "cpp": "class Solution {\npublic:\n    vector<int> mergeSortedArrays(vector<int>& nums1, vector<int>& nums2) {\n        // Your code here\n        return {};\n    }\n};"
      },
      "examples": [
        { "input": "nums1 = [1,2,3], nums2 = [2,5,6]", "output": "[1,2,2,3,5,6]", "explanation": "merge in order" }
      ],
      "testCases": [
        { "input": "[1,2,3], [2,5,6]", "expectedOutput": "[1,2,2,3,5,6]", "isHidden": false },
        { "input": "[1], []", "expectedOutput": "[1]", "isHidden": false },
        { "input": "[], []", "expectedOutput": "[]", "isHidden": false }
      ]
    },
    {
      "title": "Move Zeroes",
      "description": "Given an integer array nums, move all 0's to the end while maintaining the relative order of the non-zero elements. Return the modified array.",
      "difficulty": "Medium",
      "topic": "Arrays",
      "constraints": [
        "1 <= nums.length <= 10^5",
        "-10^4 <= nums[i] <= 10^4"
      ],
      "hints": [
        "Use two pointers",
        "Swap non-zero element forward"
      ],
      "functionSignature": { "name": "moveZeroes", "params": ["nums"], "returnType": "int[]" },
      "codeTemplate": {
        "javascript": "function moveZeroes(nums) {\n  // Your code here\n}",
        "python": "def moveZeroes(nums):\n    # Your code here\n    pass",
        "java": "class Solution {\n    public int[] moveZeroes(int[] nums) {\n        // Your code here\n        return nums;\n    }\n}",
        "cpp": "class Solution {\npublic:\n    vector<int> moveZeroes(vector<int>& nums) {\n        // Your code here\n        return nums;\n    }\n};"
      },
      "examples": [
        { "input": "[0,1,0,3,12]", "output": "[1,3,12,0,0]", "explanation": "zeroes to end" }
      ],
      "testCases": [
        { "input": "[0,1,0,3,12]", "expectedOutput": "[1,3,12,0,0]", "isHidden": false },
        { "input": "[0]", "expectedOutput": "[0]", "isHidden": false },
        { "input": "[1,0,2,0,3]", "expectedOutput": "[1,2,3,0,0]", "isHidden": false }
      ]
    }
  ]
}
