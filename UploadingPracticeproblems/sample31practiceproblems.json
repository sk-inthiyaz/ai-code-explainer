{
  "problems": [
    {
      "title": "Find Missing Number",
      "description": "Given an array containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.",
      "difficulty": "Easy",
      "topic": "Arrays",
      "constraints": [
        "1 <= nums.length <= 10^4",
        "0 <= nums[i] <= n",
        "All numbers are distinct"
      ],
      "hints": [
        "Use the formula for sum of first n numbers",
        "Or use XOR to cancel out duplicates"
      ],
      "functionSignature": {
        "name": "missingNumber",
        "params": ["nums"],
        "returnType": "int"
      },
      "codeTemplate": {
        "javascript": "function missingNumber(nums) {\n  // Your code here\n}",
        "python": "def missingNumber(nums):\n    # Your code here\n    pass",
        "java": "class Solution {\n    public int missingNumber(int[] nums) {\n        // Your code here\n        return 0;\n    }\n}",
        "cpp": "class Solution {\npublic:\n    int missingNumber(vector<int>& nums) {\n        // Your code here\n        return 0;\n    }\n};"
      },
      "examples": [
        {
          "input": "nums = [3,0,1]",
          "output": "2",
          "explanation": "Numbers 0,1,3 present; 2 is missing"
        }
      ],
      "testCases": [
        { "input": "[3,0,1]", "expectedOutput": "2", "isHidden": false },
        { "input": "[0,1]", "expectedOutput": "2", "isHidden": false },
        { "input": "[9,6,4,2,3,5,7,0,1]", "expectedOutput": "8", "isHidden": false }
      ]
    },
    {
      "title": "Longest Common Prefix",
      "description": "Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string.",
      "difficulty": "Easy",
      "topic": "Strings",
      "constraints": [
        "1 <= strs.length <= 200",
        "0 <= strs[i].length <= 200"
      ],
      "hints": [
        "Compare characters of strings vertically",
        "Stop when characters differ"
      ],
      "functionSignature": {
        "name": "longestCommonPrefix",
        "params": ["strs"],
        "returnType": "string"
      },
      "codeTemplate": {
        "javascript": "function longestCommonPrefix(strs) {\n  // Your code here\n}",
        "python": "def longestCommonPrefix(strs):\n    # Your code here\n    pass",
        "java": "class Solution {\n    public String longestCommonPrefix(String[] strs) {\n        // Your code here\n        return \"\";\n    }\n}",
        "cpp": "class Solution {\npublic:\n    string longestCommonPrefix(vector<string>& strs) {\n        // Your code here\n        return \"\";\n    }\n};"
      },
      "examples": [
        {
          "input": "strs = [\"flower\",\"flow\",\"flight\"]",
          "output": "\"fl\"",
          "explanation": "Common prefix of all strings is 'fl'"
        }
      ],
      "testCases": [
        { "input": "[\"flower\",\"flow\",\"flight\"]", "expectedOutput": "\"fl\"", "isHidden": false },
        { "input": "[\"dog\",\"racecar\",\"car\"]", "expectedOutput": "\"\"", "isHidden": false },
        { "input": "[\"interview\",\"internet\",\"internal\"]", "expectedOutput": "\"inte\"", "isHidden": false }
      ]
    },
    {
      "title": "Majority Element",
      "description": "Given an array nums of size n, return the majority element. The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.",
      "difficulty": "Medium",
      "topic": "Arrays",
      "constraints": [
        "1 <= nums.length <= 5 * 10^4",
        "-10^9 <= nums[i] <= 10^9"
      ],
      "hints": [
        "Use Boyer-Moore Voting Algorithm",
        "Or count elements using a hash map"
      ],
      "functionSignature": {
        "name": "majorityElement",
        "params": ["nums"],
        "returnType": "int"
      },
      "codeTemplate": {
        "javascript": "function majorityElement(nums) {\n  // Your code here\n}",
        "python": "def majorityElement(nums):\n    # Your code here\n    pass",
        "java": "class Solution {\n    public int majorityElement(int[] nums) {\n        // Your code here\n        return 0;\n    }\n}",
        "cpp": "class Solution {\npublic:\n    int majorityElement(vector<int>& nums) {\n        // Your code here\n        return 0;\n    }\n};"
      },
      "examples": [
        {
          "input": "nums = [3,2,3]",
          "output": "3",
          "explanation": "3 appears twice in length 3 array"
        }
      ],
      "testCases": [
        { "input": "[3,2,3]", "expectedOutput": "3", "isHidden": false },
        { "input": "[2,2,1,1,1,2,2]", "expectedOutput": "2", "isHidden": false },
        { "input": "[1,1,1,2,3,4,1]", "expectedOutput": "1", "isHidden": false }
      ]
    }
  ]
}
